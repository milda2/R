###R for biologists
##Irina & Rao, 07/12/2021
library(tidyverse)
# library(dplyr) # if tidyverse not loaded
# library(ggplot2) # if tidyverse not loaded
# LOAD Our World In Data Covid dataset ####
owid_covid = read.csv("Session3/data/owid-covid-data.csv", header = TRUE,
                      stringsAsFactors = FALSE)
owid_covid$date = as.Date(owid_covid$date)


# FILTER dataset to make smaller data.frames ####
# filter for UK data 
owid_covid %>%
  filter(location == "United Kingdom") -> owid_covid_uk

# filter for 4 countries
four_countries = c("United Kingdom", "Belgium", "Germany", "United States")
owid_covid %>%
  filter(location %in% four_countries) -> owid_covid_4countries

new_year = "2021-01-01"

# ggplot2 basics ####

# Base R plot
plot(x = owid_covid_uk$date, y = owid_covid_uk$total_cases_per_million, type = "l", col = "red")

# The same plot with ggplot2 (we are passing mapping argument to the ggplot function)
ggplot(data = owid_covid_uk, mapping = aes(x = date, y = total_cases_per_million)) +
  geom_line()

# the above code does the same as the following (we are passing mapping argument to the geom function)
ggplot(data = owid_covid_uk) +
  geom_line(mapping = aes(x = date, y = total_cases_per_million)) +
  geom_point(mapping = aes(x = date, y = total_deaths_per_million), colour = "red")

# let's change the colour of the line to red (this is not an aesthetic, i.e., 
# the colour is not derived from the dataset itself)
ggplot(data = owid_covid_uk) +
  geom_line(mapping = aes(x = date, y = total_cases_per_million), colour = "blue") 

# let's add new data, total_deaths_per_million as a differently coloured line
ggplot(data = owid_covid_uk) +
  geom_line(mapping = aes(x = date, y = total_cases_per_million), colour = "red") +
  geom_line(mapping = aes(x = date, y = total_deaths_per_million), colour = "blue") 

# COLOUR by categorical data ####
owid_covid_4countries %>%
  ggplot(aes(x = date, y = total_deaths_per_million)) +
  geom_line()

ggplot(data = owid_covid_4countries, mapping = aes(x = date, y = total_deaths_per_million)) +
  geom_line()

# What's going on here? 
owid_covid_4countries %>%
  filter(date == new_year)

# We have 4 data points for each date (one for each country), but we haven't
# told ggplot to plot them separately

# here we pass colour within the aesthetic function, because we want to colour by location

owid_covid_4countries %>%
  ggplot() +
    geom_line(mapping = aes(x = date, y = total_deaths_per_million, colour = location))

owid_covid %>%
  filter(location %in% c("Belgium", "Germany")) %>%
  ggplot() +
  geom_line(mapping = aes(x = date, y = total_deaths_per_million, colour = location))

# NOTE: the following will NOT work, it will give an error
owid_covid_4countries %>%
  ggplot() +
  geom_line(mapping = aes(x = date, y = total_deaths_per_million), colour = location)

# Q: What is the difference between the following two lines? Without running the code,
# can you tell which one will give you the expected result?
ggplot(iris) + geom_point(mapping = aes(x = Sepal.Length, y = Petal.Length, colour = "blue"))

ggplot(iris) + geom_point(mapping = aes(x = Sepal.Length, y = Petal.Length), colour = "blue")


# Building a plot step-by-step ####

owid_covid %>%
  filter(date == new_year) -> owid_covid_newyear

plot(x = log10(owid_covid_newyear$total_cases), y = log10(owid_covid_newyear$total_deaths))

# 1 - make canvas
ggplot(date = owid_covid_newyear)

# 2 - add mapping
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths))

# 3 - add geom(s)
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point()

# 4 - change scale to log
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10()

# 5 - add trendline
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm")

# 6 - change theme
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm") +
  theme_bw()

# 7 - add main title
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm") +
  theme_bw() +
  ggtitle("OWID Covid dataset: Total cases vs. total deaths on Jan 01, 2021")

# 8 - change x and y labels
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm") +
  theme_bw() +
  ggtitle("OWID Covid dataset: Total cases vs. total deaths on Jan 01, 2021") +
  labs(x = "Total cases", y = "Total deaths")

# 9 - remove panel grid
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm") +
  theme_bw() +
  ggtitle("OWID Covid dataset: Total cases vs. total deaths on Jan 01, 2021") +
  labs(x = "Total cases", y = "Total deaths") +
  theme(panel.grid = element_blank())

# 10 - add location mapping to size of point
ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point(aes(size = population)) +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm") +
  theme_bw() +
  ggtitle("OWID Covid dataset: Total cases vs. total deaths on Jan 01, 2021") +
  labs(x = "Total cases", y = "Total deaths") +
  theme(panel.grid = element_blank())

# 11 - store the plot in a variable
plot_total_cases_vs_deaths = ggplot(owid_covid_newyear, aes(x = total_cases, y = total_deaths)) +
  geom_point(aes(size = population)) +
  scale_x_log10() +
  scale_y_log10() +
  geom_smooth(method = "lm") +
  theme_bw() +
  ggtitle("OWID Covid dataset: Total cases vs. total deaths on Jan 01, 2021") +
  labs(x = "Total cases", y = "Total deaths") +
  theme(panel.grid = element_blank())

print(plot_total_cases_vs_deaths)
# 12 - save the plot to file
ggsave()
ggsave("session4/results/plot_total_cases_vs_deaths.pdf", 
       plot = plot_total_cases_vs_deaths, width = 20, height = 5)
ggsave("session4/results/plot_total_cases_vs_deaths.png", 
       plot = plot_total_cases_vs_deaths)
ggsave("session4/results/plot_total_cases_vs_deaths.svg", 
       plot = plot_total_cases_vs_deaths)



###R for biologists
##Irina & Rao, 07/12/2021
library(tidyverse)
#Import the all sheets from Excel file provided (use readxl)
library(readxl)
ifny <- read_excel("Session4/data/MSD_data.xlsx", sheet = 'IFNy')
il1 <- read_excel("Session4/data/MSD_data.xlsx", sheet = 'IL-1')
il2 <- read_excel("Session4/data/MSD_data.xlsx", sheet = 'IL-2')
il10 <- read_excel("Session4/data/MSD_data.xlsx", sheet = 'IL-10')
library(dplyr)
ifny %>% mutate(Subtraction=Calc.Conc.Mean_S1S2-Calc.Conc.Mean_Unst) -> ifny
il1 %>% mutate(Subtraction=Calc.Conc.Mean_S1S2-Calc.Conc.Mean_Unst) -> il1
il2 %>% mutate(Subtraction=Calc.Conc.Mean_S1S2-Calc.Conc.Mean_Unst) -> il2
il10 %>% mutate(Subtraction=Calc.Conc.Mean_S1S2-Calc.Conc.Mean_Unst) -> il10

ifny<-ifny[,c(1,5,6)]
il1<-il1[,c(1,5,6)]
il2<-il2[,c(1,5,6)]
il10<-il10[,c(1,5,6)]

cyto <- Reduce(function(...) merge(..., all = TRUE, by = c("Participant_ID","Randomised_to")),
       list(ifny, il1, il2, il10))
colnames(cyto)<-c("ID","Randomisation","IFNy","IL1","IL2","IL10")
#Remove negative values
cyto %>% filter(across(c(IFNy, IL1, IL2, IL10),~ .x>0|is.na(.x)==TRUE)) -> cyto
cyto %>% filter(across(c(-ID,-Randomisation),~ .x>0|is.na(.x)==TRUE)) -> cyto

#Convert groups into factors
cyto$Randomisation <- as.factor(cyto$Randomisation)
levels(cyto$Randomisation)
c(1,2)
levels(cyto$Randomisation)<-c("ChAdOx1", "Control")
#install.packages("data.table")
library(data.table)
#Wide to long format
#library(reshape2)
#cyto_melted<-melt(cyto,id.vars=c("ID","Randomisation"))
#reshape(cyto,idvar = c("ID","Randomisation"),direction = "long")

#Stick with gather from tidyr
cyto_melted<-gather(cyto,key="variable",value = "value",-ID,-Randomisation)
cyto_melted<-na.omit(cyto_melted)
#cyto2<-na.omit(cyto)
#library(reshape2)

library(ggplot2)
#Barplot
ggplot(cyto_melted, aes(fill=Randomisation, y=value, x=variable)) + 
  geom_bar(position="dodge", stat="identity") +
  theme_bw()

#Compare to this - we plot the means
ggplot(cyto_melted, aes(fill=Randomisation, y=value, x=variable)) + 
  geom_bar(position="dodge", stat = "summary", fun = "median") +
  theme_bw()

#Stacked barplot
ggplot(cyto_melted, aes(fill=Randomisation, y=value, x=variable)) + 
  geom_bar(position="stack", stat = "summary",) +
  theme_bw()

#Percent stacked barplot
ggplot(cyto_melted, aes(fill=Randomisation, y=value, x=variable)) + 
  geom_bar(position="fill", stat="summary", fun = "mean") +
  theme_bw()

#Reverse the groupping - check the relative aboundance of each cytokine by randomisation group
ggplot(cyto_melted, aes(fill=variable, y=value, x=Randomisation)) + 
  geom_bar(position="fill", stat="identity", width = 0.5) +
  theme_bw()

#Add error bars
ggplot(cyto_melted, aes(fill=Randomisation, y=(value), x=variable)) + 
  geom_bar(position="dodge", stat = "summary", fun = "mean") + 
  stat_summary(geom = "errorbar", fun.data = mean_se, 
               position = position_dodge(width = 0.90), width = 0.5) +
  theme_bw()

#Bar plots is not a good way to represent our data!

#Boxplot
ggplot(cyto_melted, aes(fill=Randomisation, y=value, x=variable)) + 
  geom_boxplot() +
  theme_bw()

#Scale - log transform
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable)) + 
  geom_boxplot()

#Facets
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable)) + 
  geom_boxplot() +
  theme_bw() +
  facet_wrap(~Randomisation)

#Remove legend
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable)) + 
  geom_boxplot() +
  theme_bw() +
  theme(legend.position = "none")+
  facet_wrap(~Randomisation)
##########################
#####End of session 4#####
#Dotplot + means
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable))+
  geom_dotplot(binaxis = "y", stackdir = "center",
               position = position_dodge(0.8), dotsize = 0.8) + 
  stat_summary(
    fun.data = "mean_sdl", fun.args = list(mult=1), 
    geom = "pointrange", color = "black",position = position_dodge(0.8)
  )

#Changing binwidth
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable))+
  geom_dotplot(binaxis = "y", stackdir = "center",
               position = position_dodge(0.8), dotsize = 0.8, binwidth = 0.2) + 
  stat_summary(
    fun.data = "mean_sdl", fun.args = list(mult=1), 
    geom = "pointrange", color = "black",position = position_dodge(0.8))

#Dot+boxplots
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable))+
  geom_dotplot(binaxis = "y", stackdir = "center",
               position = position_dodge(0.8),dotsize = 0.8, binwidth = 0.2) + 
geom_boxplot(width = 0.8, outlier.shape = NA)


#Jitter plots
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable))+
geom_jitter(aes(shape=Randomisation, color=Randomisation),
  position = position_jitter(0.2),
  size = 1.2)

#Change positions 
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable))+
  geom_jitter(aes(shape=Randomisation, color=Randomisation),
              position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
              size = 1.2)

#Adding stat
ggplot(cyto_melted, aes(fill=Randomisation, y=log(value), x=variable)) +
  geom_jitter(aes(shape=Randomisation, color=Randomisation),
              position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8),
              size = 1.2) + 
  theme_bw() +
  stat_summary(
  aes(color = Randomisation),
  fun.data="mean_sdl",  fun.args = list(mult=1), 
  geom = "pointrange",  size = 0.4,
  position = position_dodge(0.8))
