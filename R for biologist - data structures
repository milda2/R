###R for biologists
##Irina & Rao, 23/11/2021

#### constants - unchanging elements in R####
2
pi


#### variables -place-holders to which data can be assigned and changed####
x = 2
y = 5
z
my_number
# apparently this is a built-in variable - who knew?!
LETTERS

# Let's assign some data to variables
# Note that x is different from "x" or 'x'

# What is the value of z now?
z
# What is the value of x now?
x
# Variable names
gene_name_p53 = "TP53"
gene_id_p53 = 7157
is_oncogene_p53 = FALSE
gene_7157 = "TP53"
# 7157_gene = 4 # this won't work because a variable name can't start with a number

# Q: assign the values 1000 and 50 to the 
# variables num_students and num_teachers, 
# and now calculate the total number of 
# people in the class, assign this to num_people
# # hint use + to add two values
num_students = 1000
num_teachers = 50
num_people = num_students + num_teachers

#### Types of data####
num_participants = 25       # numeric
my_uni = "Oxford"           # character
am_i_happy_today = TRUE     # logical
num_instructors = "2"       # type?



#### Conversion of data types####
num_participants +  num_instructors
as.numeric(num_participants) + as.numeric(num_instructors)

# Q: What happens when you try to convert "two" to numeric type?
as.numeric("two")
# Q: What happens when you try to convert "Truth" to logical type?
as.logical("Truth")

#### Data Structures####
# Atomic vectors - most basic data type, can be of length => 0
# length 0
num_participants = numeric()
my_uni = character()
am_i_happy_today = logical()

# length 1 - we have done this already!
num_genes = 2

# length > 1 - we need to use the c() function or the : operator for a sequence of numbers
gene_num = 1:4
gene_names = c("TP53", "PTEN", "RB1", "MYC")
gene_ids = c(7157, 5728, 5925, 4609)
genes = c("PTEN", 7153)

# Contents of atomic vectors are of a single type; if not, they are 'coerced'
gene_name_p53 = "TP53"
gene_id_p53 = 7157
is_oncogene_p53 = FALSE
info_p53 = c(gene_name_p53, gene_id_p53, is_oncogene_p53)
info_p53

info_p53 = c(gene_id_p53, is_oncogene_p53)
info_p53

# Subsetting atomic vectors with []
gene_names[3]
gene_names[2:4]
gene_names[c(2,4)]
gene_names_TS = gene_names[c(1, 2, 3)]


# lists
info_p53 = list(gene_name_p53, gene_id_p53, is_oncogene_p53)
info_p53

all_genes = list(num = gene_num, name = gene_names, id = gene_ids)
all_genes

# Subsetting lists is slightly different: [] yields a list, [[]] or $ yields an element of a list
all_genes[1]

all_genes[[1]]
all_genes[["name"]]
all_genes$name
all_genes$num

# data frames 
all_genes_df = data.frame(num = gene_num, name = gene_names, id = gene_ids)
all_genes_df

# subsetting data frames with [row, column]
all_genes_df[1, 2]
all_genes_df[1, ]
all_genes_df_subset = all_genes_df[2:3, 1:3]
all_genes_df[c(1, 3), ]
all_genes_df[2:3, ]
all_genes_df[, 2]
all_genes_df$name
all_genes_df$id
# Q: Subset all_genes_df for only the 2nd and 3rd rows
# hint: fill in the blanks as needed: all_genes[ , ]
all_genes_df[c(2,3), ]
all_genes_df[2:3, ]

# How to get information about objects in R
print(gene_names)
length(gene_names)
class(gene_names)
str(gene_names)

# Q: Examine the ToothGrowth dataset that is preloaded in your R session
# hint: Use ? to look up a description of the dataset in the help pages
# hint: try print(), length(), class(), str() on ToothGrowth
# hint: Now try head() and tail()
? ToothGrowth
print(ToothGrowth)
length(ToothGrowth)
class(ToothGrowth)
#gives you data structure
str(ToothGrowth)
#gives you first and last 6 entries
head(ToothGrowth)
tail(ToothGrowth)
summary(ToothGrowth)

# Q: Subset ToothGrowth to show only the rows where the dose is higher than or equal to 1.0
# hint: Try ToothGrowth$dose >= 1.0
# hint: Remember that you can pass a vector of TRUE/FALSE within the [] to subset: ToothGrowth[true_false_vector, ]
ToothGrowth$dose>=1
ToothGrowth[ToothGrowth$dose>=1, ]
x<-4
if(x>0) {print ('Positive number')} else {print('Negative')}
x<--4
x<-0


goi_name = "AGO2"
if(goi_name %in% gene_names) {
  print("The gene of interest is in the gene set")
} else {print('not in!')}


###R for biologists
##Irina & Rao, 23/11/2021

####Functions are also assigned to variables####
add <- function(x, y) return(x + y)
add(10, 11)

add <- function(x, y) {
  return(x + y)
}

sum_of_squares <- function(x) {
  sum(x^2)
}

sum_of_squares(1:5)

####Create a function to convert Fahrenheit to Celsius####
fahrenheit_to_celsius <- function(temp_F) {
  temp_C <- (temp_F - 32) * 5 / 9
  return(temp_C)
}

fahrenheit_to_celsius(35)

##There is a package doing the same thing for you (and many more)!
install.packages("weathermetrics")
library("weathermetrics")

fahrenheit.to.celsius(35)
###R for biologists
##Irina & Rao, 23/11/2021

###Testing the truth value of an expression####
1 < 2
34 > 35
1 <= (2/2)
1 >= (2/2)
"A" == "B"
# makes letters upper or lower case
"TP53" == toupper("tp53")
tolower("TP53")
"A" %in% LETTERS

4 %% 3

x <- "c"
x > 1000
y <- "i"
x > y
z <- "A"
x> z

##Logical operators
x <- c(TRUE, 4, 7, FALSE)
y <- c(FALSE, TRUE, FALSE, TRUE)
! x
x & y
x && y
x | y
x || y

###CONDITIONALS####
##IF conditional
x <- 4
if(x > 0) {
  print("Positive number")
}
x <- -4
? gene_names
goi_name = "PTEN"
if(goi_name %in% gene_names) {
  print("The gene of interest is in the gene set")
}

##IF ELSE
x <- 4
if(x > 0) {
  print("Positive number")
} else {
  print("Not positive number")
}
x <- -4

##chained conditionals
x <- 0
if (x < 0) {
  print("Negative number")
} else if (x > 0) {
  print("Positive number")
} else {
  print("Zero")
}

#Q: write a conditional for printing "The gene of interest is in the gene set"
#or "The gene of interest is not in the gene set"
#use different genes - RB1, AGO2

###LOOPS####
##WHILE loop performs an action as long as a condition is true
i <- 1
while (i < 6) {
  print(i)
  i = i+1
}

am_i_happy_today = TRUE
while(am_i_happy_today) {  # an infinite loop
  print("happy")
}

while(am_i_happy_today) {  # a loop that runs only once
  print("happy")
  am_i_happy_today = FALSE
}

counter = 1
while(counter <= 20) {
  print(counter)
  counter = counter + 1
}

index = 1
while(index < 27) {
  new_text = paste("letter", index, "is", LETTERS[index])
  print(new_text)
  index = index + 1
}

##FOR loop iterates over a vector or a list
# perform an action over every item

for (year in c(2011,2012,2013,2014,2015,2016)) 
{	
  print(paste("The year is", year))
}	

gene_names = c("TP53", "PTEN", "RB1", "MYC")
for(each_item in gene_names) {
  each_item_lcase = tolower(each_item)
  print(each_item_lcase)
}

#Q: write a loop for printing the name and the counter for each gene in the vector gene_names
